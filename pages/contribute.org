#+BEGIN_COMMENT
.. title: Contribute to the Guide
.. slug: contribute
.. date: 2017-11-02 13:46:04 UTC
.. tags: 
.. category: 
.. link: 
.. description: 
.. type: text
.. author: dang
#+END_COMMENT

Anyone is welcome to contribute to the guide.  
We all have our own speciality, and by writing a post you will get to share your knolwege of a subject.

Contributing doesn't have to be creating new content,  editing and adding to existing content is equally important.

Equally, you can just fork the whole thing and create your own guide, (although its always nice to give something back to the community)

* Contribution Process.

 - Fork a copy of the Main Repository
 - <Work>
 - When you have finished submit a pull request
 - Your new content will be merged into the guide

#+BEGIN_EXAMPLE
*NOTE:*

The git commands in this example make use of the command line (as I find it easier, and infinately more productive), 
Take time to learn the commands, of if you feel particually sadomashicistic, Google can help you
learn the GUI versions.

*NOTE2:
The exmple is also based on Linux, (as I find it Easier and infinately more productive),
Take time to learn Linux, or if you feel particually sadomachicistic, Google can help you translate to Windows.
#+END_EXAMPLE

* The Setup:  Bring out the GIT

The first stage is to get a copy of the repository to work in. There
are 101 git workflows (even github itself has no clear consensus), so
I will describe the one I perfer to use, which is the *fork* based
flow.

More details on Git and its workflows can be found in the [[./posts/git][Git posts]]

** Create a Github Account

 - This should be self explanatory go to:  [[https://github.com]]  and follow the instructions
 - Recommened Step:  Setup some SSH Keys [[https://help.github.com/articles/connecting-to-github-with-ssh/]]

** Forking the Repository
#+BEGIN_EXAMPLE
*NOTE*
If you wish, you can work in the main repository rather than a fork of it.  HOWEVER: you will need to create your own branches, as the staging and master branches are protected.
In this case Feel free to skip this step
#+END_EXAMPLE 


The first stage is to create a *fork* of the main repository, this will
give you a copy of the main repository to work in (without distraction
from other users). The workflow is similar to [[https://gist.github.com/Chaser324/ce0505fbed06b947d962][the one given here]]

On the main [[https://github.com/djgoldsmith/EH-H2GH][EH-H2GH]] page, click the "Fork" button,  this will create a new version of the repo at <YOURUSER>/EH-H2GH.

You can now *clone* the new repository to the local machine:

  - In Github click the *clone or download* button and copy the link provied

#+BEGIN_SRC bash
git clone <LINK>
#+END_SRC

** Keeping the Fork up to date

As the main repository will be being modified, it is good to be able to incorporate these changes in your  own version.
We can do this by tracking the original *upstream* repository

#+BEGIN_SRC bash
#Add the Upstram repository
git remote add upstream https://github.com/djgoldsmith/EH-H2GH.git

#And verify this worked
git remote -v
#+END_SRC

When it comes to updating the fork, first fetch the upstream repo's branches and commits

#+BEGIN_SRC bash
#Fetch upstream data
git fetch upstream
#+END_SRC

You can then Synchronsie the *master* and *staging* branches with the up to date version.

#+BEGIN_SRC bash

git checkout master
git merge upstream/master

git checkout staging
git merge upstream/staging
#+END_SRC


* The Setup 2: Nikola

Pages are Generated using the [[https://getnikola.com/][Nikola]] static site generator.  
As adding Nikola to the Git would be a BadThing(TM) you will also need to have a local version
on your machine.


** Installing Nikola
#+BEGIN_EXAMPLE
I like to sandbox everything, so make use of pythons virtualenv feature to do this.
You can skip the virtualenv steps if you wish
#+END_EXAMPLE

#. Install Vritualenv

  #+BEGIN_SRC bash
  sudo apt-get install python3-venv
  #+END_SRC

#. Create a new Env

  In the base Nikola directory create a new virtual env

  #+BEGIN_SRC bash
  python3 -m venv env
  #+END_SRC

#. Enter the Virtual Env

  #+BEGIN_SRC bash
  $source env/bin/activate

  #The prompt should change to 
  (env)$
  #+END_SRC

#. Install Nikola and Required Plugins

  #+BEGIN_SRC bash
  (env)$ pip install nikola
  ... <snip> ..
  (env)$ nikola plugin -i orgmode
  #+END_SRC


** Working with Nikola

Each time you wish to work with nikola you need to enter the virtualenv

#+BEGIN_SRC bash
$source env/bin/activate
(env)$
#+END_SRC


You can then build the page with

#+BEGIN_SRC bash
(env)$nikola build
#+END_SRC

And fire up a local webserver to see the results as [[localhost:8000]]

#+BEGIN_SRC bash
(env)$nikola serve
#+END_SRC


* Branching and Pulling

Once we have a working system, we can get ready to contribute.  

As we are using a standard Git Workflow, we first need to get some prep work done.

#+BEGIN_EXAMPLE
A standard GIT workflow is to have several *branches* of work within
each repository.  This aviods new code (or content) being added to the
main repository (usually called the Trunk or Master) at a whim, which
could potentially break a system.

To help with this GIT has the concept of branches. I tend to think of
these as mini forks, that allow you to work on content in its own
sandboxed environment without affecting the main codebase.

Standard practice is to have a branch for each new *feature* you wish to add.
Once work is copleted (and testing done) the branch is *merged* back into the main repositoy.

For The Guide, we have two main branches:

  - Master.   The "Release" version of the guide.  This is what the main documentation is generated from. 
  - Staging   Think of this as the *dev* branch.  Where changes are merged, and problems solved before a release.

Both are protected, so you shouldnt be able to accidently check code in without a *pull request*.
#+END_EXAMPLE

*** Creating a Branch
As we wish to add new content, we create a new *feature branch*.  

First we tell git we want to make a new branch.  Then *checkout* the branch content

#+BEGIN_SRC bash

$git branch <name>
$git checkout <name>

#Check which branch we are in
$ git branch
* dg-initcontent
  gh-pages
  master
  staging
#+END_SRC

*** Doing Some Work

Hopefully, this is self explanatory
We next do whatever work we need to do, so in a software project we would:

  - Write Tests
  - Write Docs
  - Write Code

*** Saving our work.

Every so often, we will reach a point where we finish a chunk of work, and wish to save our progress.
In this case we need to let git know we want to *commit* our changes, which will effectivly take a snapshot of our progress.

#+BEGIN_EXAMPLE
NOTE:
In my view, There is no right or wrong time to commit, its a matter of preference.

Sometimes I commit after I finish a function,  other times after completing a block of work that seems logical.
Apply some common sense, and commit before and after making any major changes. 
#+END_EXAMPLE

First we can ask git which files have changed using the /git status/ command.

#+BEGIN_SRC bash
$ git status
On branch forking
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   pages/contribute.org
	modified:   pages/forkers.md

no changes added to commit (use "git add" and/or "git commit -a")
#+END_SRC

Once we review the changes, we can *add* files to the commit using the /git add/ command


#+BEGIN_SRC bash
$git add <filename>
#+END_SRC

You can also check the *status* again to make sure verything has been updates

#+BEGIN_SRC bash
$ git status
On branch forking
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

	modified:   pages/forkers.md

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   pages/contribute.org
#+END_SRC


Finally we can *commit* our changes

Use the /git commit -m <sensible message>/ command to do this 

#+BEGIN_SRC bash
$ git commit -m "Added Dang to the list of contributors"
[forking 1bf440a] Added Dang to the list of contributors
 1 file changed, 1 insertion(+)
#+END_SRC
 
*** Saving our changes with Github

One of the nice things about Git as a distrubuted VCS is we can work independenly from a central point.
This means we can make several changes (and commits) on our own machine before we *push* the data to the central  repository (in this case github).

#+BEGIN_EXAMPLE
This can be a major point of confusion.

Github is a service that hosts *git* based repositories (as well as being a great source of octocat stickers)
This means it is the central point where we send our data to.  I tend to think of it as a server.

There are several  other services that act as central repositories:

  - Bitbucket is great for allowing private repositorires
  - GitLab: Is an Open Source version of Github
  - Private git servers


GIT is the protocl each of these repositorys use to manage the data, (think protocol).
That means while Github is focused on git, there are other systems that will use the same protocol for version control.


A reasonable anolgy is HTTP:

 - Apache / Nginx / IIS are the servers (This is the equivient of Github)
 - The HTTP protocol is what they deal with (This part is GIT)
#+END_EXAMPLE


To make our changes availbe to the rest of the world we will need to *push* them to our central point

If it is the first time we may get an error a couple of errors:

#+BEGIN_NOTE
You may be asked to configure the username and email for the repository.
If you are in the lab you may want to use the --local flag rather than the --global one

git config --local user.name <whatever>
#+END_NOTE

#+BEGIN_SRC bash
$ git push --set-upstream origin forking
Counting objects: 23, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (23/23), done.
Writing objects: 100% (23/23), 5.77 KiB | 0 bytes/s, done.
Total 23 (delta 11), reused 0 (delta 0)
remote: Resolving deltas: 100% (11/11), completed with 4 local objects.
To github.com:djgoldsmith/EH-H2GH.git
 * [new branch]      forking -> forking
Branch forking set up to track remote branch forking from origin.
#+END_SRC

Otherwise a push will  just work.

#+BEGIN_SRC bash
$git push
#+END_SRC

You can then keep repeating these steps ad  making changes until you have finished that chunk of work.

*** Merging our changes into the trunk

When we have finished everything, we need a way to merge the changes back into the main repository.

For this we need to make a *pull request*

On Github find your forked version of the repository.  Make sure you have selected the *correct branch* (this should be staging) from the dropdown box.
Thn hit the *new pull request* button.  (There is also a "You have recently pushed branches" popup.

#+BEGIN_EXAMPLE
NOTE:  A Picture would be good here.  Also get adam to check it works with Forks.
#+END_EXAMPLE

Complete the  form, and add a sensible comment in the comments box. Then hit the *create pull request* button.
If you are merging back into the *master* or *staging* branches, the pull reuest will not automatically be dealt with.
However, after a quick review the code should be accepted into the main guide.


*** Cleaning up and getting ready to go again.


Once the branch has been merged, ,it is good practice to clean it up.

#+BEGIN_SRC bash
git branch -d <name>
#+END_SRC


We may also want to grab the latest version of the guide from the trunk


#+BEGIN_SRC bash
#Add the Upstram repository (You may have done this already)
git remote add upstream https://github.com/djgoldsmith/EH-H2GH.git
#Fetch upstream data
git fetch upstream
git checkout master
git merge upstream/master

git checkout staging
git merge upstream/staging
#+END_SRC


* Worked Example:  
Lets follow this through with an example,  and add outselves as a contributer to the guide.

WE first create a feature branch using a "sensible" name using /git branch/
Then make that the active branch using /git checkout/
#+BEGIN_SRC bash
$ git branch forking
$ git checkout forking
Switched to branch 'forking'
#+END_SRC

We can then make changes to the contributers file, and put our name in the hall of fame

Edit *pages/forkers.md* and add your name to the list of people who have forked the repository.
For the momennt ignore the file contents (that comes later),  just add a dash, and your name in the Happy Forkers section.

#+BEGIN_SRC markdown

Happy Forkers
--------------
And those that have Forked the Repo

 - Dan Goldsmith (dang)   

#+END_SRC


After saving the file, we check the status

#+BEGIN_SRC bash
$ git status
On branch forking
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   pages/contribute.org
	modified:   pages/forkers.md

no changes added to commit (use "git add" and/or "git commit -a")
#+END_SRC

And add the relevant file, and check it has been added to the commit

#+BEGIN_SRC bash
$ git add pages/forkers.md 
(env) dang@dang-laptop:~/Documents/Github/TheGuide/EH-H2GH$ git status
On branch forking
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

	modified:   pages/forkers.md

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   pages/contribute.org

#+END_SRC

After we are done commit the changes to git

#+BEGIN_SRC bash
$ git commit -m "Added Dang to the list of contributors"
[forking 1bf440a] Added Dang to the list of contributors
 1 file changed, 1 insertion(+)
#+END_SRC
 

And push
#+BEGIN_SRC bash
$git push
Counting objects: 23, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (23/23), done.
Writing objects: 100% (23/23), 5.77 KiB | 0 bytes/s, done.
Total 23 (delta 11), reused 0 (delta 0)
remote: Resolving deltas: 100% (11/11), completed with 4 local objects.
To github.com:djgoldsmith/EH-H2GH.git
 * [new branch]      forking -> forking
Branch forking set up to track remote branch forking from origin.
#+END_SRC


We have finished our work here so submit a pull request usinig the github webpage
And wait for the work to be accepted.
